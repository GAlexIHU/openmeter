{
  "root": true,
  "parser": "@babel/eslint-parser",
  "parserOptions": {
    "project": "./tsconfig.json",
    "tsconfigRootDir": "."
  },
  "overrides": [
    {
      "files": ["*.ts", "*.tsx"],
      "plugins": ["prettier", "unused-imports", "simple-import-sort"],
      "extends": ["plugin:@typescript-eslint/recommended"],
      "rules": {
        "prettier/prettier": "error",
        "simple-import-sort/imports": "error",
        "unused-imports/no-unused-imports": "error",
        "@typescript-eslint/no-empty-function": "error",
        "@typescript-eslint/no-non-null-assertion": "error",
        "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
        "unused-imports/no-unused-vars": [
          2,
          { "varsIgnorePattern": "^_", "argsIgnorePattern": "^_" }
        ],
        "eqeqeq": "error",
        "curly": "error",
        "eol-last": ["error", "always"],
        "prefer-template": "error",
        "@typescript-eslint/no-use-before-define": "error",
        "@typescript-eslint/no-misused-promises": "error",
        "@typescript-eslint/promise-function-async": "error",
        "@typescript-eslint/return-await": "error",
        "@typescript-eslint/no-empty-interface": "error",
        "@typescript-eslint/no-useless-empty-export": "error",
        "@typescript-eslint/explicit-function-return-type": [
          "error",
          { "allowExpressions": true }
        ],
        "@typescript-eslint/explicit-module-boundary-types": "error",
        "@typescript-eslint/no-explicit-any": [
          "warn",
          { "fixToUnknown": true }
        ],
        "@typescript-eslint/no-inferrable-types": "off",
        "@typescript-eslint/no-unused-expressions": "error",
        "@typescript-eslint/no-unused-vars": [
          "error",
          {
            "argsIgnorePattern": "^_",
            "varsIgnorePattern": "^_"
          }
        ],
        "@typescript-eslint/naming-convention": [
          "error",
          { "selector": "default", "format": ["camelCase"] },

          { "selector": "variableLike", "format": ["camelCase"] },
          {
            "selector": "variable",
            "format": ["camelCase", "UPPER_CASE"],
            "leadingUnderscore": "allow"
          },
          {
            "selector": [
              "objectLiteralProperty",
              "typeProperty",
              "parameterProperty"
            ],
            "format": null
          },
          {
            "selector": "class",
            "format": ["PascalCase"],
            "leadingUnderscore": "allow"
          },
          {
            "selector": "function",
            "format": ["camelCase", "PascalCase"]
          },
          {
            "selector": "parameter",
            "format": ["camelCase", "PascalCase"],
            "leadingUnderscore": "allow"
          },
          { "selector": "enumMember", "format": ["UPPER_CASE"] },
          {
            "selector": "memberLike",
            "format": ["camelCase", "PascalCase", "UPPER_CASE"]
          },
          {
            "selector": "memberLike",
            "modifiers": ["private"],
            "format": ["camelCase"],
            "leadingUnderscore": "allow"
          },
          {
            "selector": "typeParameter",
            "format": ["PascalCase"],
            "prefix": ["T"]
          },
          {
            "selector": "typeLike",
            "format": ["PascalCase"],
            "custom": { "regex": "^[IT][A-Z]", "match": false }
          },
          {
            "selector": "interface",
            "format": ["PascalCase"],
            "custom": { "regex": "^[IT][A-Z]", "match": false }
          }
        ],
        "@typescript-eslint/restrict-template-expressions": [
          "error",
          {
            "allowNumber": true,
            "allowBoolean": true,
            "allowAny": true,
            "allowNullish": false,
            "allowRegExp": false
          }
        ],
        "@typescript-eslint/prefer-readonly": "warn"
      }
    }
  ]
}
